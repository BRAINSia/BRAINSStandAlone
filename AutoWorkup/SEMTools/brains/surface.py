# -*- coding: utf8 -*- 
"""Autogenerated file - DO NOT EDIT
If you spot a bug, please report it on the mailing list and/or change the generator."""

from nipype.interfaces.base import CommandLine, CommandLineInputSpec, SEMLikeCommandLine, TraitedSpec, File, Directory, traits, isdefined, InputMultiPath, OutputMultiPath
import os


class IcosahedronResamplerInputSpec(CommandLineInputSpec):
    inputSurfaceFile = File(desc="Input Surface Filename", exists=True, argstr="--inputSurfaceFile %s")
    interpolateType = traits.Enum("Nearest", "Linear", desc="The type of interpolation to be used", argstr="--interpolateType %s")
    resolution = traits.Int(desc="The resolution of the icosahedron sphere", argstr="--resolution %d")
    radius = traits.Float(desc="The radius of input and output spheres", argstr="--radius %f")
    outputSurfaceFile = traits.Either(traits.Bool, File(), hash_files=False, desc="Output Surface Filename", argstr="--outputSurfaceFile %s")


class IcosahedronResamplerOutputSpec(TraitedSpec):
    outputSurfaceFile = File(desc="Output Surface Filename", exists=True)


class IcosahedronResampler(SEMLikeCommandLine):
    """title: 
    BRAINS Resample Sphere Using Icosahedron
  

category: 
    BRAINS.Surface
  

description: 
    This program resamples the input sphere with an icosahedron and outputs the icosahedron sphere associated with resampled scalar values from the input sphere.
  

version: 1.0

documentation-url: http://www.nitrc.org/plugins/mwiki/index.php/brains:BRAINSSurfaceRegister

license: https://www.nitrc.org/svn/brains/BuildScripts/trunk/License.txt

contributor: Wen Li and Luis Ibanez and Vincent Magnotta

acknowledgements: Funding for this work was provided by NIH/NINDS award NS050568

"""

    input_spec = IcosahedronResamplerInputSpec
    output_spec = IcosahedronResamplerOutputSpec
    _cmd = " IcosahedronResampler "
    _outputs_filenames = {'outputSurfaceFile':'outputSurfaceFile'}


class QuadEdgeMeshClampScalarsInputSpec(CommandLineInputSpec):
    inputSurfaceFile = File(desc="Input Surface Filename", exists=True, argstr="--inputSurfaceFile %s")
    outputMin = traits.Float(desc="The expected minimum value of the output", argstr="--outputMin %f")
    outputMax = traits.Float(desc="The expected maximum value of the output", argstr="--outputMax %f")
    outputSurfaceFile = traits.Either(traits.Bool, File(), hash_files=False, desc="Output Surface Filename", argstr="--outputSurfaceFile %s")


class QuadEdgeMeshClampScalarsOutputSpec(TraitedSpec):
    outputSurfaceFile = File(desc="Output Surface Filename", exists=True)


class QuadEdgeMeshClampScalars(SEMLikeCommandLine):
    """title: 
    BRAINS Clamp Scalars
  

category: 
    BRAINS.Surface
  

description: 
    This program clamps scalar values of the input surface.
  

version: 1.0

documentation-url: http://www.nitrc.org/plugins/mwiki/index.php/brains:BRAINSSurfaceRegister

license: https://www.nitrc.org/svn/brains/BuildScripts/trunk/License.txt

contributor: Wen Li and Vincent A. Magnotta

acknowledgements: Funding for this work was provided by NIH/NINDS award NS050568

"""

    input_spec = QuadEdgeMeshClampScalarsInputSpec
    output_spec = QuadEdgeMeshClampScalarsOutputSpec
    _cmd = " QuadEdgeMeshClampScalars "
    _outputs_filenames = {'outputSurfaceFile':'outputSurfaceFile'}


class BRAINSApplySurfaceLabelsInputSpec(CommandLineInputSpec):
    inputLabelMap = File(desc="Input Label Map", exists=True, argstr="--inputLabelMap %s")
    inputSurface = File(desc="Input Surface", exists=True, argstr="--inputSurface %s")
    cellDataName = File(desc="Cell Data Name", exists=True, argstr="--cellDataName %s")
    outputSurface = traits.Either(traits.Bool, File(), hash_files=False, desc="Output Surface", argstr="--outputSurface %s")


class BRAINSApplySurfaceLabelsOutputSpec(TraitedSpec):
    outputSurface = File(desc="Output Surface", exists=True)


class BRAINSApplySurfaceLabels(SEMLikeCommandLine):
    """title: 
    BRAINS Surface Label Map
  

category: 
    BRAINS.Surface
  

description: This program takes in a label map and a surface and labels the surface. The images as defined in ITK is in an LPS coordinate system while the surface is expected to be in an RAS coordinate system to support integration with the 3D Slicer program. Currently the cells (i.e. triangles) of the surface based on a voting rule. If all three points have a different labels then the cell is arbitrarily assigned to one of the labels. 

version: 3.0

documentation-url: http://www.nitrc.org/plugins/mwiki/index.php/brains:BRAINSApplySurfaceLabels

license: https://www.nitrc.org/svn/brains/BuildScripts/trunk/License.txt

contributor: Steven A. Dunn and Vincent A. Magnotta

acknowledgements: 
  This work was developed by the University of Iowa Departments of Radiology and Psychiatry. This software was supported in part of NIH/NINDS award NS050568.  
  

"""

    input_spec = BRAINSApplySurfaceLabelsInputSpec
    output_spec = BRAINSApplySurfaceLabelsOutputSpec
    _cmd = " BRAINSApplySurfaceLabels "
    _outputs_filenames = {'outputSurface':'outputSurface'}


class BRAINSSurfaceGenerationInputSpec(CommandLineInputSpec):
    inputImageFile = File(desc="Input Image File Name", exists=True, argstr="--inputImageFile %s")
    inputSurfaceFile = File(desc="Input Surface File Name", exists=True, argstr="--inputSurfaceFile %s")
    outputSurface = traits.Either(traits.Bool, File(), hash_files=False, desc="Output surface filename", argstr="--outputSurface %s")
    surfaceValue = traits.Float(desc="The iso-surface value for the resulting surface", argstr="--surfaceValue %f")
    genusNumber = traits.Bool(desc="calculate the number of genus of the output surface", argstr="--genusNumber ")
    decimateSurface = traits.Bool(desc="decimate the surface", argstr="--decimateSurface ")
    numberOfElements = traits.Int(desc="Number of faces desired after decimation", argstr="--numberOfElements %d")
    smoothSurface = traits.Bool(desc="Smooth the surface", argstr="--smoothSurface ")
    numIterations = traits.Int(desc="Number of Iterations Used in Smoothing", argstr="--numIterations %d")
    relaxationFactor = traits.Float(desc="The Relaxation Factor Used in Smoothing", argstr="--relaxationFactor %f")


class BRAINSSurfaceGenerationOutputSpec(TraitedSpec):
    outputSurface = File(desc="Output surface filename", exists=True)


class BRAINSSurfaceGeneration(SEMLikeCommandLine):
    """title: 
    BRAINS Surface Generation
  

category: 
    BRAINS.Surface
  

description: 
    This program generates surfaces from itk images with an iso-contour value. It can also take a surface as input. The surface decimation and smoothing will be applied on the generated surface. The primary purpose of this program is to generate the cortical surface of the brain.  
  

version: 1.0

documentation-url: http://www.nitrc.org/plugins/mwiki/index.php/brains:BRAINSMarchingCubes

license: https://www.nitrc.org/svn/brains/BuildScripts/trunk/License.txt

contributor: Wen Li and Vincent A. Magnotta

acknowledgements: Funding for this work was provided by NIH/NINDS award NS050568

"""

    input_spec = BRAINSSurfaceGenerationInputSpec
    output_spec = BRAINSSurfaceGenerationOutputSpec
    _cmd = " BRAINSSurfaceGeneration "
    _outputs_filenames = {'outputSurface':'outputSurface'}


class LabelMapsInputSpec(CommandLineInputSpec):
    labelFileList = InputMultiPath(File(exists=True), desc="The list of filenames for each label", argstr="--labelFileList %s...")
    outputImageFile = traits.Either(traits.Bool, File(), hash_files=False, desc="Output LabelMap Filename", argstr="--outputImageFile %s")


class LabelMapsOutputSpec(TraitedSpec):
    outputImageFile = File(desc="Output LabelMap Filename", exists=True)


class LabelMaps(SEMLikeCommandLine):
    """title: 
    BRAINS Label Maps
  

category: 
    BRAINS.Surface
  

description: 
    This program generates a labelmap (.nii) through a list of label files (.mask). We assume that each label is given by an individual file. An integer is assigned to the label and value of it is decided by the order of the label file occurred in the labelFileList.  

version: 1.0

documentation-url: http://www.nitrc.org/plugins/mwiki/index.php/brains:BRAINSSurfaceRegister

license: https://www.nitrc.org/svn/brains/BuildScripts/trunk/License.txt

contributor: Wen Li and Vincent Magnotta

acknowledgements: Funding for this work was provided by NIH/NINDS award NS050568

"""

    input_spec = LabelMapsInputSpec
    output_spec = LabelMapsOutputSpec
    _cmd = " LabelMaps "
    _outputs_filenames = {'outputImageFile':'outputImageFile'}


class QuadEdgeMeshHistogramMatchingInputSpec(CommandLineInputSpec):
    inputSurfaceFile = File(desc="Input Surface Filename", exists=True, argstr="--inputSurfaceFile %s")
    refSurfaceFile = File(desc="Reference Surface Filename", exists=True, argstr="--refSurfaceFile %s")
    numberOfHistogramLevels = traits.Int(desc="Number of histogram levels used in the program", argstr="--numberOfHistogramLevels %d")
    numberOfMatchPoints = traits.Int(desc="The number of match points used in the program", argstr="--numberOfMatchPoints %d")
    outputSurfaceFile = traits.Either(traits.Bool, File(), hash_files=False, desc="Output Surface Filename", argstr="--outputSurfaceFile %s")


class QuadEdgeMeshHistogramMatchingOutputSpec(TraitedSpec):
    outputSurfaceFile = File(desc="Output Surface Filename", exists=True)


class QuadEdgeMeshHistogramMatching(SEMLikeCommandLine):
    """title: 
    BRAINS Histogram Matching
  

category: 
    BRAINS.Surface
  

description: 
    This program adjusts the scalar values of the input surface in the reference of the ref surface using the histogram matching technique.
  

version: 1.0

documentation-url: http://www.nitrc.org/plugins/mwiki/index.php/brains:BRAINSSurfaceRegister

license: https://www.nitrc.org/svn/brains/BuildScripts/trunk/License.txt

contributor: Wen Li and Vincent A. Magnotta

acknowledgements: Funding for this work was provided by NIH/NINDS award NS050568

"""

    input_spec = QuadEdgeMeshHistogramMatchingInputSpec
    output_spec = QuadEdgeMeshHistogramMatchingOutputSpec
    _cmd = " QuadEdgeMeshHistogramMatching "
    _outputs_filenames = {'outputSurfaceFile':'outputSurfaceFile'}


class ResampleQuadEdgeMeshInputSpec(CommandLineInputSpec):
    inputMeshFile = File(desc="Input Mesh Filename", exists=True, argstr="--inputMeshFile %s")
    refMeshFile = File(desc="Reference Mesh Filename", exists=True, argstr="--refMeshFile %s")
    interpolateType = traits.Enum("Nearest", "Linear", desc="The type of interpolation to be used", argstr="--interpolateType %s")
    outputMeshFile = traits.Either(traits.Bool, File(), hash_files=False, desc="Output Mesh Filename", argstr="--outputMeshFile %s")


class ResampleQuadEdgeMeshOutputSpec(TraitedSpec):
    outputMeshFile = File(desc="Output Mesh Filename", exists=True)


class ResampleQuadEdgeMesh(SEMLikeCommandLine):
    """title: 
    BRAINS Resample Quad Edge Mesh
  

category: 
    BRAINS.Surface
  

description: 
      This program resamples the scalar values on the input mesh using points on the reference mesh. The interpolation type is either "Linear" or "Nearest".
  

version: 1.0

documentation-url: http://www.nitrc.org/plugins/mwiki/index.php/brains:BRAINSSurfaceRegister

license: https://www.nitrc.org/svn/brains/BuildScripts/trunk/License.txt

contributor: Wen Li and Luis Ibanez and Vincent Magnotta

acknowledgements: Funding for this work was provided by NIH/NINDS award NS050568

"""

    input_spec = ResampleQuadEdgeMeshInputSpec
    output_spec = ResampleQuadEdgeMeshOutputSpec
    _cmd = " ResampleQuadEdgeMesh "
    _outputs_filenames = {'outputMeshFile':'outputMeshFile'}


class QuadEdgeMeshPiecewiseRescaleInputSpec(CommandLineInputSpec):
    inputSurfaceFile = File(desc="Input Surface Filename", exists=True, argstr="--inputSurfaceFile %s")
    outputMin = traits.Float(desc="The expected minimum value of the output", argstr="--outputMin %f")
    outputMax = traits.Float(desc="The expected maximum value of the output", argstr="--outputMax %f")
    centralValue = traits.Float(desc="The central value of piecewise rescaling", argstr="--centralValue %f")
    outputSurfaceFile = traits.Either(traits.Bool, File(), hash_files=False, desc="Output Surface Filename", argstr="--outputSurfaceFile %s")


class QuadEdgeMeshPiecewiseRescaleOutputSpec(TraitedSpec):
    outputSurfaceFile = File(desc="Output Surface Filename", exists=True)


class QuadEdgeMeshPiecewiseRescale(SEMLikeCommandLine):
    """title: 
    BRAINS Piesewise Rescale
  

category: 
    BRAINS.Surface
  

description: 
    This program rescale scalar values of the input surface piecewisely by the central value.
  

version: 1.0

documentation-url: http://www.nitrc.org/plugins/mwiki/index.php/brains:BRAINSSurfaceRegister

license: https://www.nitrc.org/svn/brains/BuildScripts/trunk/License.txt

contributor: Wen Li and Vincent A. Magnotta

acknowledgements: Funding for this work was provided by NIH/NINDS award NS050568

"""

    input_spec = QuadEdgeMeshPiecewiseRescaleInputSpec
    output_spec = QuadEdgeMeshPiecewiseRescaleOutputSpec
    _cmd = " QuadEdgeMeshPiecewiseRescale "
    _outputs_filenames = {'outputSurfaceFile':'outputSurfaceFile'}


class AssignArrayInputSpec(CommandLineInputSpec):
    sourceSurfaceFile = File(desc="Source Surface Filename", exists=True, argstr="--sourceSurfaceFile %s")
    targetSurfaceFile = File(desc="Target Surface Filename", exists=True, argstr="--targetSurfaceFile %s")
    getArrayName = traits.Str(desc="Array Name Get from source", argstr="--getArrayName %s")
    setArrayName = traits.Str(desc="Array Name set to output", argstr="--setArrayName %s")
    outputSurfaceFile = traits.Either(traits.Bool, File(), hash_files=False, desc="Output Surface Filename", argstr="--outputSurfaceFile %s")


class AssignArrayOutputSpec(TraitedSpec):
    outputSurfaceFile = File(desc="Output Surface Filename", exists=True)


class AssignArray(SEMLikeCommandLine):
    """title: 
    BRAINS Assign Array
  

category: 
    BRAINS.Surface
  

description: 
    This program assigns array (scalars) from the source surface to the target surface. 
  

version: 1.0

documentation-url: http://www.nitrc.org/plugins/mwiki/index.php/brains:BRAINSSurfaceRegister

license: https://www.nitrc.org/svn/brains/BuildScripts/trunk/License.txt

contributor: Wen Li

acknowledgements: Funding for this work was provided by NIH/NINDS award NS050568

"""

    input_spec = AssignArrayInputSpec
    output_spec = AssignArrayOutputSpec
    _cmd = " AssignArray "
    _outputs_filenames = {'outputSurfaceFile':'outputSurfaceFile'}


class SurfaceColorInputSpec(CommandLineInputSpec):
    inputSurfaceFile = File(desc="Input Surface Filename", exists=True, argstr="--inputSurfaceFile %s")
    labelMapFile = File(desc="LabelMap Image Filename", exists=True, argstr="--labelMapFile %s")
    radius = traits.Float(desc="The radius used to search for nearest label for a surface point", argstr="--radius %f")
    numOfLabels = traits.Int(desc="The number of labels the labelmap image has", argstr="--numOfLabels %d")
    increaseRadius = traits.Bool(desc="Increase the radius by 1.0 at a time until reaching a nonzero label", argstr="--increaseRadius ")
    outputSurfaceFile = traits.Either(traits.Bool, File(), hash_files=False, desc="Output Surface Filename", argstr="--outputSurfaceFile %s")


class SurfaceColorOutputSpec(TraitedSpec):
    outputSurfaceFile = File(desc="Output Surface Filename", exists=True)


class SurfaceColor(SEMLikeCommandLine):
    """title: 
    BRAINS Surface Color
  

category: 
    BRAINS.Surface
  

description: 
    This program assigns labels from a labelmap image to the surface 
  

version: 1.0

documentation-url: http://www.nitrc.org/plugins/mwiki/index.php/brains:BRAINSSurfaceRegister

license: https://www.nitrc.org/svn/brains/BuildScripts/trunk/License.txt

contributor: Wen Li and Vincent Magnotta

acknowledgements: Funding for this work was provided by NIH/NINDS award NS050568

"""

    input_spec = SurfaceColorInputSpec
    output_spec = SurfaceColorOutputSpec
    _cmd = " SurfaceColor "
    _outputs_filenames = {'outputSurfaceFile':'outputSurfaceFile'}


class BRAINSMeasureSurfaceInputSpec(CommandLineInputSpec):
    inputSurface = File(desc="Input Surface Filename", exists=True, argstr="--inputSurface %s")
    arrayName = traits.Str(desc="Array name containing the anatomical labels", argstr="--arrayName %s")
    labelNames = InputMultiPath(traits.Str, desc="Names for the anatomical labels", sep=",", argstr="--labelNames %s")
    subjectId = traits.Str(desc="Subject ID to be used for labeling of results", argstr="--subjectId %s")
    scanId = traits.Str(desc="Scan ID to be used for labeling of results", argstr="--scanId %s")
    writeCsvFile = traits.Bool(desc="Boolean Flag to specify if a CSV file is to be written", argstr="--writeCsvFile ")
    writeXmlFile = traits.Bool(desc="Boolean Flag to specify if a XML file is to be written", argstr="--writeXmlFile ")
    csvFile = traits.Either(traits.Bool, File(), hash_files=False, desc="Output CSV Rsult filename", argstr="--csvFile %s")
    xmlFile = traits.Either(traits.Bool, File(), hash_files=False, desc="Output XML Result filename", argstr="--xmlFile %s")
    testDepth = traits.Bool(desc="Test Cortical depth measurements", argstr="--testDepth ")
    totalDepthResults = InputMultiPath(traits.Float, desc="Expected total depth measurements for each label. Used for testing of program", sep=",", argstr="--totalDepthResults %s")
    gyralDepthResults = InputMultiPath(traits.Float, desc="Expected gyral depth measurements for each label. Used for testing of program", sep=",", argstr="--gyralDepthResults %s")
    sulcalDepthResults = InputMultiPath(traits.Float, desc="Expected sulcal depth measurements for each label. Used for testing of program", sep=",", argstr="--sulcalDepthResults %s")
    testArea = traits.Bool(desc="Test surface area measurements. Used for testing of program", argstr="--testArea ")
    totalAreaResults = InputMultiPath(traits.Float, desc="Expected total surface area for each label. Used for testing of program", sep=",", argstr="--totalAreaResults %s")
    gyralAreaResults = InputMultiPath(traits.Float, desc="Expected gyral surface area for each label. Used for testing of program", sep=",", argstr="--gyralAreaResults %s")
    sulcalAreaResults = InputMultiPath(traits.Float, desc="Expected sulcal surface area for each label. Used for testing of program", sep=",", argstr="--sulcalAreaResults %s")
    testCurvature = traits.Bool(desc="Test curvature measurements. Used for testing of program", argstr="--testCurvature ")
    totalCurvatureResults = InputMultiPath(traits.Float, desc="Expected total curvature for each label. Used for testing of program", sep=",", argstr="--totalCurvatureResults %s")
    gyralCurvatureResults = InputMultiPath(traits.Float, desc="Expected gyral curvature for each label. Used for testing of program", sep=",", argstr="--gyralCurvatureResults %s")
    sulcalCurvatureResults = InputMultiPath(traits.Float, desc="Expected sulcal curvature for each label. Used for testing of program", sep=",", argstr="--sulcalCurvatureResults %s")


class BRAINSMeasureSurfaceOutputSpec(TraitedSpec):
    csvFile = File(desc="Output CSV Rsult filename", exists=True)
    xmlFile = File(desc="Output XML Result filename", exists=True)


class BRAINSMeasureSurface(SEMLikeCommandLine):
    """title: 
    BRAINS Surface Measures
  

category: 
    BRAINS.Surface
  

description: 
    This program generates measures regional statistics of a surface based on the scalars associated with the triangles. Regional measures for surface area, cortical thickness, and curvature are written to either a CSV or XML file. You must have a labeled VTK surface to work with this program. The user specifies the label name to be used in the measurements. It is assumed that the surface also contains the following data arrays: Mean_Curvature (Curvature measures) and Depth (Depth measurements). In the future the names of these arrays will be added to the command line for flexibility. Currently only the CSV output is supported. We are currently working to add the XML format. The program also supports input of expected values that can be used for testing purposes.
  

version: 3.0

documentation-url: http://www.nitrc.org/plugins/mwiki/index.php/brains:BRAINSMeasureSurface

license: https://www.nitrc.org/svn/brains/BuildScripts/trunk/License.txt

contributor: Vincent A. Magnotta

acknowledgements: Funding for this work was provided by NIH/NINDS award NS050568

"""

    input_spec = BRAINSMeasureSurfaceInputSpec
    output_spec = BRAINSMeasureSurfaceOutputSpec
    _cmd = " BRAINSMeasureSurface "
    _outputs_filenames = {'xmlFile':'xmlFile','csvFile':'csvFile'}


class SurfaceLabelCleanUpInputSpec(CommandLineInputSpec):
    inputSurfaceFile = File(desc="Input Surface Filename", exists=True, argstr="--inputSurfaceFile %s")
    outputSurfaceFile = traits.Either(traits.Bool, File(), hash_files=False, desc="Output Surface Filename", argstr="--outputSurfaceFile %s")


class SurfaceLabelCleanUpOutputSpec(TraitedSpec):
    outputSurfaceFile = File(desc="Output Surface Filename", exists=True)


class SurfaceLabelCleanUp(SEMLikeCommandLine):
    """title: 
    BRAINS Surface Label Clean Up
  

category: 
    BRAINS.Surface
  

description: 
      This program cleans up surface labels iteratively. There are four steps which are realized in four functions to do the work. After cleaning up, it helps to get rid of extra label patches, isolated label dots (points), and sharp triangles on the borders. ASSUME: labels are associated with the input surface as point data scalars using the name of "LabelValue".
  

version: 1.0

documentation-url: http://www.nitrc.org/plugins/mwiki/index.php/brains:BRAINSSurfaceRegister

license: https://www.nitrc.org/svn/brains/BuildScripts/trunk/License.txt

contributor: Wen Li and Vincent Magnotta

acknowledgements: Funding for this work was provided by NIH/NINDS award NS050568

"""

    input_spec = SurfaceLabelCleanUpInputSpec
    output_spec = SurfaceLabelCleanUpOutputSpec
    _cmd = " SurfaceLabelCleanUp "
    _outputs_filenames = {'outputSurfaceFile':'outputSurfaceFile'}


class MultiResolutionRegistrationInputSpec(CommandLineInputSpec):
    fixedMeshFileList = InputMultiPath(File(exists=True), desc="The list of file names for fixed meshes", argstr="--fixedMeshFileList %s...")
    movingMeshFileList = InputMultiPath(File(exists=True), desc="The list of file names for moving meshes", argstr="--movingMeshFileList %s...")
    fixedMeshFileName = File(desc="Unresampled Fixed Mesh File Name", exists=True, argstr="--fixedMeshFileName %s")
    movingMeshFileName = File(desc="Unresampled Moving Mesh File Name", exists=True, argstr="--movingMeshFileName %s")
    rigidIterations = InputMultiPath(traits.Int, desc="The number of iterations for rigid (rotational) registration in each level", sep=",", argstr="--rigidIterations %s")
    demonsIterations = InputMultiPath(traits.Int, desc="The number of iterations for spherical demons registration in each level", sep=",", argstr="--demonsIterations %s")
    smoothIterations = InputMultiPath(traits.Int, desc="The number of iterations for smoothing the displacement in each level", sep=",", argstr="--smoothIterations %s")
    metricSignificance = InputMultiPath(traits.Float, desc="The percentage of change of metric (mean squared distance) used to stop the registration in each level", sep=",", argstr="--metricSignificance %s")
    resolutionLevels = traits.Int(desc="The numbers of resolution levels", argstr="--resolutionLevels %d")
    deformedFileNameRes4 = traits.Either(traits.Bool, File(), hash_files=False, desc="Output mesh file name of the deformed fixed mesh in highest resolution level", argstr="--deformedFileNameRes4 %s")
    deformedFileName = traits.Either(traits.Bool, File(), hash_files=False, desc="Output mesh file name of the deformed original fixed mesh", argstr="--deformedFileName %s")
    deformationFieldFileName = traits.Either(traits.Bool, File(), hash_files=False, desc="Output deformation field as vectors on the fixed mesh", argstr="--deformationFieldFileName %s")


class MultiResolutionRegistrationOutputSpec(TraitedSpec):
    deformedFileNameRes4 = File(desc="Output mesh file name of the deformed fixed mesh in highest resolution level", exists=True)
    deformedFileName = File(desc="Output mesh file name of the deformed original fixed mesh", exists=True)
    deformationFieldFileName = File(desc="Output deformation field as vectors on the fixed mesh", exists=True)


class MultiResolutionRegistration(SEMLikeCommandLine):
    """title: 
    BRAINS Multi Resolution Registration
  

category: 
    BRAINS.Surface
  

description: 
    This program does multiresolution registration on two lists of meshes.
  

version: 1.0

documentation-url: http://www.nitrc.org/plugins/mwiki/index.php/brains:BRAINSSurfaceRegister

license: https://www.nitrc.org/svn/brains/BuildScripts/trunk/License.txt

contributor: Wen Li and Luis Ibanez and Vincent Magnotta

acknowledgements: Funding for this work was provided by NIH/NINDS award NS050568

"""

    input_spec = MultiResolutionRegistrationInputSpec
    output_spec = MultiResolutionRegistrationOutputSpec
    _cmd = " MultiResolutionRegistration "
    _outputs_filenames = {'deformedFileNameRes4':'deformedFileNameRes4','deformationFieldFileName':'deformationFieldFileName','deformedFileName':'deformedFileName'}


class BRAINSAssignSurfaceFeaturesInputSpec(CommandLineInputSpec):
    inputSurfaceFile = File(desc="Input Surface File Name", exists=True, argstr="--inputSurfaceFile %s")
    outerSurfaceFile = File(desc="Out-layer Surface for calculating cortical thickness", exists=True, argstr="--outerSurfaceFile %s")
    outputSurfaceFile = traits.Either(traits.Bool, File(), hash_files=False, desc="Output surface filename", argstr="--outputSurfaceFile %s")
    distanceToPC_AP = traits.Bool(desc="calculate the geometry feature of distanceToPC in the direction of AnteriorToPosterior", argstr="--distanceToPC_AP ")
    distanceToPC_IS = traits.Bool(desc="calculate the geometry feature of distanceToPC in the direction of InferiorToSuperior", argstr="--distanceToPC_IS ")
    PC = InputMultiPath(traits.Float, desc="Location of PC Point", sep=",", argstr="--PC %s")
    distanceToHull = traits.Bool(desc="calculate the geometry feature of distanceToHull", argstr="--distanceToHull ")
    corticalThickness = traits.Bool(desc="calculate the geometry feature of corticalThickness", argstr="--corticalThickness ")
    maxThickness = traits.Float(desc="The expected maximum cortical thickness", argstr="--maxThickness %f")
    curvature = traits.Bool(desc="calculate the geometry feature of curvature", argstr="--curvature ")
    curvatureType = traits.Enum("Gauss", "Mean", desc="The type of curvature to be calculated", argstr="--curvatureType %s")


class BRAINSAssignSurfaceFeaturesOutputSpec(TraitedSpec):
    outputSurfaceFile = File(desc="Output surface filename", exists=True)


class BRAINSAssignSurfaceFeatures(SEMLikeCommandLine):
    """title: 
    BRAINS Assign Surface Features
  

category: 
    BRAINS.Surface
  

description: 
    Ths program calculate several types of geometry features (distanceFromPC, depth to a hull, cortical thickness, and mean_curvature) on the input surface. The geometry features will be added as arrays of the vtkPolyData of the output surface. If cortical thickness needs to be calculated, the input surface should be the inner surface. 
  

version: 1.0

documentation-url: http://www.nitrc.org/plugins/mwiki/index.php/brains:BRAINSMarchingCubes

license: https://www.nitrc.org/svn/brains/BuildScripts/trunk/License.txt

contributor: Wen Li and Vincent A. Magnotta

acknowledgements: Funding for this work was provided by NIH/NINDS award NS050568

"""

    input_spec = BRAINSAssignSurfaceFeaturesInputSpec
    output_spec = BRAINSAssignSurfaceFeaturesOutputSpec
    _cmd = " BRAINSAssignSurfaceFeatures "
    _outputs_filenames = {'outputSurfaceFile':'outputSurfaceFile'}


class ProbabilityLabelsInputSpec(CommandLineInputSpec):
    inputMeshList = InputMultiPath(File(exists=True), desc="The list of input meshes filenames", argstr="--inputMeshList %s...")
    mostLikely = traits.Bool(desc="calculate the most likely label for each point", argstr="--mostLikely ")
    probability = traits.Bool(desc="calculate the probabilit for each label at each point", argstr="--probability ")
    outputMeshFile = traits.Either(traits.Bool, File(), hash_files=False, desc="Output Mesh Filename", argstr="--outputMeshFile %s")


class ProbabilityLabelsOutputSpec(TraitedSpec):
    outputMeshFile = File(desc="Output Mesh Filename", exists=True)


class ProbabilityLabels(SEMLikeCommandLine):
    """title: 
    BRAINS Probability Labels
  

category: 
    BRAINS.Surface
  

description: 
      This program calculates the probability of each label across a list of surfaces when the flag "probability" is ON and the most likely labels (assign each point with the highest probability label across surfaces) when the flag "mostLikely" is ON.
  

version: 1.0

documentation-url: http://www.nitrc.org/plugins/mwiki/index.php/brains:BRAINSSurfaceRegister

license: https://www.nitrc.org/svn/brains/BuildScripts/trunk/License.txt

contributor: Wen Li and Vincent Magnotta

acknowledgements: Funding for this work was provided by NIH/NINDS award NS050568

"""

    input_spec = ProbabilityLabelsInputSpec
    output_spec = ProbabilityLabelsOutputSpec
    _cmd = " ProbabilityLabels "
    _outputs_filenames = {'outputMeshFile':'outputMeshFile'}


class RemoveTinyLabelsInputSpec(CommandLineInputSpec):
    inputSurfaceFile = File(desc="Input Surface Filename", exists=True, argstr="--inputSurfaceFile %s")
    labelList = InputMultiPath(traits.Int, desc="label List", sep=",", argstr="--labelList %s")
    outputSurfaceFile = traits.Either(traits.Bool, File(), hash_files=False, desc="Output Surface Filename", argstr="--outputSurfaceFile %s")


class RemoveTinyLabelsOutputSpec(TraitedSpec):
    outputSurfaceFile = File(desc="Output Surface Filename", exists=True)


class RemoveTinyLabels(SEMLikeCommandLine):
    """title: 
    BRAINS Remove Labels
  

category: 
    BRAINS.Surface
  

description: 
      This program removes each label in LabelList and replaces it with the label that has maximum points around the removal label patch. It is used to clean up labels that only associated with few vertices on the surface. ASSUME: inputSurfaceFile does not have more than 50 labels on it.
  

version: 1.0

documentation-url: http://www.nitrc.org/plugins/mwiki/index.php/brains:BRAINSSurfaceRegister

license: https://www.nitrc.org/svn/brains/BuildScripts/trunk/License.txt

contributor: Wen Li and Vincent Magnotta

acknowledgements: Funding for this work was provided by NIH/NINDS award NS050568

"""

    input_spec = RemoveTinyLabelsInputSpec
    output_spec = RemoveTinyLabelsOutputSpec
    _cmd = " RemoveTinyLabels "
    _outputs_filenames = {'outputSurfaceFile':'outputSurfaceFile'}


class AverageScalarsByResamplingInputSpec(CommandLineInputSpec):
    templateSurfaceFile = File(desc="Template Surface File Name", exists=True, argstr="--templateSurfaceFile %s")
    templateSphereFile = File(desc="Template Sphere File Name", exists=True, argstr="--templateSphereFile %s")
    deformedTemplateMeshList = InputMultiPath(File(exists=True), desc="The list of deformed template mesh generated by registering subject to template", argstr="--deformedTemplateMeshList %s...")
    sphereWithScalarsList = InputMultiPath(File(exists=True), desc="The list of spheres with scalar values", argstr="--sphereWithScalarsList %s...")
    numSubs = traits.Int(desc="The number of subjects excluding the template to generate the atlas", argstr="--numSubs %d")
    templateSurfaceWithAverageScalars = traits.Either(traits.Bool, File(), hash_files=False, desc="Output mesh file name of the template surface with average scalar values", argstr="--templateSurfaceWithAverageScalars %s")


class AverageScalarsByResamplingOutputSpec(TraitedSpec):
    templateSurfaceWithAverageScalars = File(desc="Output mesh file name of the template surface with average scalar values", exists=True)


class AverageScalarsByResampling(SEMLikeCommandLine):
    """title: 
    BRAINS Average Scalar Values
  

category: 
    BRAINS.Surface
  

description: 
    This program average scalar values among registered spheres and maps the average scalar values onto the template surface.
  

version: 1.0

documentation-url: http://www.nitrc.org/plugins/mwiki/index.php/brains:BRAINSSurfaceRegister

license: https://www.nitrc.org/svn/brains/BuildScripts/trunk/License.txt

contributor: Wen Li and Vincent Magnotta

acknowledgements: Funding for this work was provided by NIH/NINDS award NS050568

"""

    input_spec = AverageScalarsByResamplingInputSpec
    output_spec = AverageScalarsByResamplingOutputSpec
    _cmd = " AverageScalarsByResampling "
    _outputs_filenames = {'templateSurfaceWithAverageScalars':'templateSurfaceWithAverageScalars'}


class WarpQuadEdgeMeshInputSpec(CommandLineInputSpec):
    fixedMeshFile = File(desc="Fixed Mesh Filename", exists=True, argstr="--fixedMeshFile %s")
    movingMeshFile = File(desc="Moving Mesh Filename", exists=True, argstr="--movingMeshFile %s")
    deformedMeshFile = File(desc="Deformed Mesh Filename", exists=True, argstr="--deformedMeshFile %s")
    interpolateType = traits.Enum("Nearest", "Linear", desc="The type of interpolation to be used", argstr="--interpolateType %s")
    outputMeshFile = traits.Either(traits.Bool, File(), hash_files=False, desc="Output Mesh Filename", argstr="--outputMeshFile %s")


class WarpQuadEdgeMeshOutputSpec(TraitedSpec):
    outputMeshFile = File(desc="Output Mesh Filename", exists=True)


class WarpQuadEdgeMesh(SEMLikeCommandLine):
    """title: 
    BRAINS Warp Quad Edge Mesh
  

category: 
    BRAINS.Surface
  

description: 
      This program warps scalar values from the moving mesh to the fixed mesh using a deformation field (deformed fixed). The output mesh has points from the fixed mesh with scalar values from the moving mesh. So it should "look" like the moving mesh, as the result of registration. 
  

version: 1.0

documentation-url: http://www.nitrc.org/plugins/mwiki/index.php/brains:BRAINSSurfaceRegister

license: https://www.nitrc.org/svn/brains/BuildScripts/trunk/License.txt

contributor: Wen Li and Luis Ibanez and Vincent Magnotta

acknowledgements: Funding for this work was provided by NIH/NINDS award NS050568

"""

    input_spec = WarpQuadEdgeMeshInputSpec
    output_spec = WarpQuadEdgeMeshOutputSpec
    _cmd = " WarpQuadEdgeMesh "
    _outputs_filenames = {'outputMeshFile':'outputMeshFile'}


class RearrangeSurfaceLabelsInputSpec(CommandLineInputSpec):
    inputSurfaceFile = File(desc="Input Surface Filename", exists=True, argstr="--inputSurfaceFile %s")
    labelNameFile = File(desc="Label Name Filename", exists=True, argstr="--labelNameFile %s")
    outputSurfaceFile = traits.Either(traits.Bool, File(), hash_files=False, desc="Output Surface Filename", argstr="--outputSurfaceFile %s")


class RearrangeSurfaceLabelsOutputSpec(TraitedSpec):
    outputSurfaceFile = File(desc="Output Surface Filename", exists=True)


class RearrangeSurfaceLabels(SEMLikeCommandLine):
    """title: 
    BRAINS Rearrange Labels
  

category: 
    BRAINS.Surface
  

description: 
      This program rearranges surface labels after removing tiny labels and combining labels. The left labels are renumbered using continuous numbers and the full name of each label is given in the field data with the name of "LabelName".
  

version: 1.0

documentation-url: http://www.nitrc.org/plugins/mwiki/index.php/brains:BRAINSSurfaceRegister

license: https://www.nitrc.org/svn/brains/BuildScripts/trunk/License.txt

contributor: Wen Li and Vincent Magnotta

acknowledgements: Funding for this work was provided by NIH/NINDS award NS050568

"""

    input_spec = RearrangeSurfaceLabelsInputSpec
    output_spec = RearrangeSurfaceLabelsOutputSpec
    _cmd = " RearrangeSurfaceLabels "
    _outputs_filenames = {'outputSurfaceFile':'outputSurfaceFile'}


class BRAINSSurfaceFlatteningInputSpec(CommandLineInputSpec):
    inputSurfaceFile = File(desc="Input Surface File Name", exists=True, argstr="--inputSurfaceFile %s")
    outputSurfaceFile = traits.Either(traits.Bool, File(), hash_files=False, desc="Output surface filename", argstr="--outputSurfaceFile %s")
    sphereRadius = traits.Float(desc="The radius of the output sphere", argstr="--sphereRadius %f")
    seed = traits.Bool(desc="Specify axis along which seed cells are chosen", argstr="--seed ")
    seedAxis = traits.Enum("x", "y", "z", desc="Specify the seed axis as in Cartesian Coordinate System", argstr="--seedAxis %s")
    rotate = traits.Bool(desc="rotate the sphere to align polar point", argstr="--rotate ")
    maxAxis = traits.Enum("x", "y", "z", desc="the polar point along this axis stays to be the polar point on the sphere", argstr="--maxAxis %s")


class BRAINSSurfaceFlatteningOutputSpec(TraitedSpec):
    outputSurfaceFile = File(desc="Output surface filename", exists=True)


class BRAINSSurfaceFlattening(SEMLikeCommandLine):
    """title: 
    BRAINS Surface Flattening
  

category: 
    BRAINS.Surface
  

description: 
    This program flattens the genus zero cortical surface onto a sphere. 
  

version: 1.0

license: https://www.nitrc.org/svn/brains/BuildScripts/trunk/License.txt

contributor: Wen Li and Arnaud Gelas and Vincent Magnotta

acknowledgements: Funding for this work was provided by NIH/NINDS award NS050568

"""

    input_spec = BRAINSSurfaceFlatteningInputSpec
    output_spec = BRAINSSurfaceFlatteningOutputSpec
    _cmd = " BRAINSSurfaceFlattening "
    _outputs_filenames = {'outputSurfaceFile':'outputSurfaceFile'}


class SmoothingMeshScalarsInputSpec(CommandLineInputSpec):
    inputSurfaceFile = File(desc="Input Surface Filename", exists=True, argstr="--inputSurfaceFile %s")
    opt_lambda = traits.Float(desc="The value to control the smoothing effect.", argstr="--lambda %f")
    iterations = traits.Float(desc="The number of iterations to do the smoothing", argstr="--iterations %f")
    outputSurfaceFile = traits.Either(traits.Bool, File(), hash_files=False, desc="Output Surface Filename", argstr="--outputSurfaceFile %s")


class SmoothingMeshScalarsOutputSpec(TraitedSpec):
    outputSurfaceFile = File(desc="Output Surface Filename", exists=True)


class SmoothingMeshScalars(SEMLikeCommandLine):
    """title: 
    BRAINS Smooth Scalars
  

category: 
    BRAINS.Surface
  

description: 
    This program smoothes scalars of the input surface by lambda and number of iterations.
  

version: 1.0

documentation-url: http://www.nitrc.org/plugins/mwiki/index.php/brains:BRAINSSurfaceRegister

license: https://www.nitrc.org/svn/brains/BuildScripts/trunk/License.txt

contributor: Wen Li and Luis Ibanez and Vincent A. Magnotta

acknowledgements: Funding for this work was provided by NIH/NINDS award NS050568

"""

    input_spec = SmoothingMeshScalarsInputSpec
    output_spec = SmoothingMeshScalarsOutputSpec
    _cmd = " SmoothingMeshScalars "
    _outputs_filenames = {'outputSurfaceFile':'outputSurfaceFile'}


class QuadEdgeMeshSimilarityInputSpec(CommandLineInputSpec):
    inputSurfaceFile1 = File(desc="Input Surface1 Filename", exists=True, argstr="--inputSurfaceFile1 %s")
    inputSurfaceFile2 = File(desc="Input Surface2 Filename", exists=True, argstr="--inputSurfaceFile2 %s")
    labelName1 = traits.Str(desc="The array name of labels on inputSurface1", argstr="--labelName1 %s")
    labelName2 = traits.Str(desc="The array name of labels on inputSurface2", argstr="--labelName2 %s")
    average = traits.Bool(desc="To calculate the average similarities across labels", argstr="--average ")
    outputSimilarityFile = traits.Either(traits.Bool, File(), hash_files=False, desc="Output Similarity Filename", argstr="--outputSimilarityFile %s")


class QuadEdgeMeshSimilarityOutputSpec(TraitedSpec):
    outputSimilarityFile = File(desc="Output Similarity Filename", exists=True)


class QuadEdgeMeshSimilarity(SEMLikeCommandLine):
    """title: 
    BRAINS Quad Edge Mesh Similarity
  

category: 
    BRAINS.Surface
  

description: 
      This program compares overlap between two label arrays on two input surfaces. Both Dice and Jaccard Indices are given for each label in the output .txt file. The average Dice and Jaccard Indices are added to the bottom lines of the output file, if the flag "Average" is ON.
  

version: 1.0

documentation-url: http://www.nitrc.org/plugins/mwiki/index.php/brains:BRAINSSurfaceRegister

license: https://www.nitrc.org/svn/brains/BuildScripts/trunk/License.txt

contributor: Wen Li and Luis Ibanez and Vincent Magnotta

acknowledgements: Funding for this work was provided by NIH/NINDS award NS050568

"""

    input_spec = QuadEdgeMeshSimilarityInputSpec
    output_spec = QuadEdgeMeshSimilarityOutputSpec
    _cmd = " QuadEdgeMeshSimilarity "
    _outputs_filenames = {'outputSimilarityFile':'outputSimilarityFile'}


class CombineLabelsInputSpec(CommandLineInputSpec):
    inputSurfaceFile = File(desc="Input Surface Filename", exists=True, argstr="--inputSurfaceFile %s")
    keepLabel = traits.Int(desc="Keep Label", argstr="--keepLabel %d")
    removeLabel = traits.Int(desc="Remove Label", argstr="--removeLabel %d")
    outputSurfaceFile = traits.Either(traits.Bool, File(), hash_files=False, desc="Output Surface Filename", argstr="--outputSurfaceFile %s")


class CombineLabelsOutputSpec(TraitedSpec):
    outputSurfaceFile = File(desc="Output Surface Filename", exists=True)


class CombineLabels(SEMLikeCommandLine):
    """title: 
    BRAINS Combine Labels
  

category: 
    BRAINS.Surface
  

description: 
    This program replace RemoveLabel with KeepLabel on PointData of input surface.
  

version: 1.0

documentation-url: http://www.nitrc.org/plugins/mwiki/index.php/brains:BRAINSSurfaceRegister

license: https://www.nitrc.org/svn/brains/BuildScripts/trunk/License.txt

contributor: Wen Li and Vincent Magnotta

acknowledgements: Funding for this work was provided by NIH/NINDS award NS050568

"""

    input_spec = CombineLabelsInputSpec
    output_spec = CombineLabelsOutputSpec
    _cmd = " CombineLabels "
    _outputs_filenames = {'outputSurfaceFile':'outputSurfaceFile'}
