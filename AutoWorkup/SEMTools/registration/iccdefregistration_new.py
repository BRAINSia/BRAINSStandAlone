"""Autogenerated file - DO NOT EDIT
If you spot a bug, please report it on the mailing list and/or change the generator."""

from nipype.interfaces.base import CommandLine, CommandLineInputSpec, TraitedSpec, File, Directory, traits, isdefined, InputMultiPath, OutputMultiPath
import os
from nipype.interfaces.slicer.base import SlicerCommandLine


class iccdefRegistration_NewInputSpec(CommandLineInputSpec):
    movingVolume = File(desc="Required: input moving image", exists=True, argstr="--movingVolume %s")
    fixedVolume = File(desc="Required: input fixed target image", exists=True, argstr="--fixedVolume %s")
    outputVolume = traits.Either(traits.Bool, File(), hash_files=False, desc="Required: output prefix is appended to the outputDirectory (IT SHOULD NOT START WITH A full path!).", argstr="--outputVolume %s")
    outputDirectory = traits.Either(traits.Bool, File(), hash_files=False, desc="Output Directory must exists prior to running the program.", argstr="--outputDirectory %s")
    outputForwardDisplacementFieldVolume = traits.Either(traits.Bool, File(), hash_files=False, desc="output forward deformation field vector image.", argstr="--outputForwardDisplacementFieldVolume %s")
    outputBackwardDisplacementFieldVolume = traits.Either(traits.Bool, File(), hash_files=False, desc="output backward deformation field vector image.", argstr="--outputBackwardDisplacementFieldVolume %s")
    smoothDisplacementFieldSigma = traits.Float(desc="A gaussian smoothing value to be applied to the deformation feild/", argstr="--smoothDisplacementFieldSigma %f")
    inputPixelType = traits.Enum("float", "uchar", "short", "ushort", "int", desc="Input Volumes Pixel Type: float|uchar|short|ushort|int", argstr="--inputPixelType %s")
    outputPixelType = traits.Enum("CopyInputPixelType", "float", "uchar", "short", "ushort", "int", desc="Output Volume Pixel Type: float|uchar|short|ushort|int", argstr="--outputPixelType %s")
    outputDisplacement = traits.Bool(desc="Flag to indicate whether Displacement Field  for x y and z component images are written", argstr="--outputDisplacement ")
    outputJacobianImage = traits.Bool(desc="Flag to indicate whether jacobian images are written ", argstr="--outputJacobianImage ")
    outputDisplacementField = traits.Bool(desc="Flag to indicate whether deformation field  are written ", argstr="--outputDisplacementField ")
    forceCoronalZeroOrigin = traits.Bool(desc="Flag to indicate that all images being read in must have their spatial centers matched.", argstr="--forceCoronalZeroOrigin ")
    outputDebug = traits.Bool(desc="Flag to write the images after each step", argstr="--outputDebug ")
    backgroundFillValue = traits.Int(desc="Replacement value to overwrite background when performing BOBF", argstr="--backgroundFillValue %d")
    medianFilterSize = InputMultiPath(traits.Int, desc="Median filter radius in all 3 directions", sep=",", argstr="--medianFilterSize %s")
    maskProcessingMode = traits.Enum("NOMASK", "BOBF", desc="What mode to use for using the masks: NOMASK|BOBF.  Brain Only Background Fill uses the masks to pre-process the input images by clipping and filling in the background with a predefined value.", argstr="--maskProcessingMode %s")
    fixedBinaryVolume = File(desc="Mask filename for desired region of interest in the Fixed image.", exists=True, argstr="--fixedBinaryVolume %s")
    movingBinaryVolume = File(desc="Mask filename for desired region of interest in the Moving image.", exists=True, argstr="--movingBinaryVolume %s")
    fixedLandmark = File(desc="landmark filename for the Fixed image.", exists=True, argstr="--fixedLandmark %s")
    movingLandmark = File(desc="Landmark filename for the Moving image.", exists=True, argstr="--movingLandmark %s")
    initialMovingDisplacementFieldVolume = File(desc="Initial deformation field vector image file name for moving image", exists=True, argstr="--initialMovingDisplacementFieldVolume %s")
    initialFixedDisplacementFieldVolume = File(desc="Initial deformation field vector image file name for fixed image", exists=True, argstr="--initialFixedDisplacementFieldVolume %s")
    initializeWithTransform = File(desc="Initial Transform filename", exists=True, argstr="--initializeWithTransform %s")
    numberOfHistogramBins = traits.Int(desc="the number of histogram levels", argstr="--numberOfHistogramBins %d")
    numberOfMatchPoints = traits.Int(desc="the number of match points", argstr="--numberOfMatchPoints %d")
    numberOfPyramidLevels = traits.Int(desc="the number of pyramid levels", argstr="--numberOfPyramidLevels %d")
    arrayOfPyramidLevelIterations = InputMultiPath(traits.Int, desc="the iterations for each pyramid level", sep=",", argstr="--arrayOfPyramidLevelIterations %s")
    max_step_length = traits.Float(desc="Maximum length of an update vector (0: no restriction)", argstr="--max_step_length %f")
    use_histogram_matching = traits.Bool(desc="Intensity Normalization", argstr="--use_histogram_matching ")
    useConsistentIntensity = traits.Bool(desc="Choose consistent Intensity registration algorithm ", argstr="--useConsistentIntensity ")
    useConsistentLandmark = traits.Bool(desc="Choose consistent landmark registration algorithm ", argstr="--useConsistentLandmark ")
    similarityWeight = traits.Float(desc="the weight of similarity cost", argstr="--similarityWeight %f")
    regularizationWeight = traits.Float(desc="the weight of regularization cost", argstr="--regularizationWeight %f")
    inverseWeight = traits.Float(desc="the weight of inverse constitency", argstr="--inverseWeight %f")
    landmarkWeight = traits.Float(desc="the weight of inverse constitency", argstr="--landmarkWeight %f")
    jacobian = traits.Float(desc="the minimum Jacobian value", argstr="--jacobian %f")
    harmonic_percent = traits.Float(desc="Butter worth filter harmonic percentage", argstr="--harmonic_percent %f")
    gui = traits.Bool(desc="Display intermediate image volumes for debugging", argstr="--gui ")
    promptUser = traits.Bool(desc="Prompt the user to hit enter each time an image is sent to the DebugImageViewer", argstr="--promptUser ")


class iccdefRegistration_NewOutputSpec(TraitedSpec):
    outputVolume = File(desc="Required: output prefix is appended to the outputDirectory (IT SHOULD NOT START WITH A full path!).", exists=True)
    outputDirectory = File(desc="Output Directory must exists prior to running the program.", exists=True)
    outputForwardDisplacementFieldVolume = File(desc="output forward deformation field vector image.", exists=True)
    outputBackwardDisplacementFieldVolume = File(desc="output backward deformation field vector image.", exists=True)


class iccdefRegistration_New(SlicerCommandLine):
    """title: ICCDEF Registration

category: Registration

description: 
    This program finds a deformation field to warp a moving image onto a fixed image.  The images must be of the same signal kind, and contain an image of the same kind of object.  This program uses the Thirion Demons warp software in ITK, the Insight Toolkit.
  

version: 0.1.0.$Revision: 1.4 $(alpha)

license: NEED TO ADD

contributor: This tool was developed by Hans Johnson and Greg Harris.

"""

    input_spec = iccdefRegistration_NewInputSpec
    output_spec = iccdefRegistration_NewOutputSpec
    _cmd = " iccdefRegistration_New "
    _outputs_filenames = {'outputVolume':'outputVolume.nii','outputForwardDisplacementFieldVolume':'outputForwardDisplacementFieldVolume.nii','outputBackwardDisplacementFieldVolume':'outputBackwardDisplacementFieldVolume.nii','outputDirectory':'outputDirectory.nii'}
