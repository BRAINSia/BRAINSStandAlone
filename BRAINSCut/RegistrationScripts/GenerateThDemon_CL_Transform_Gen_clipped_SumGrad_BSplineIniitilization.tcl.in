#!/usr/bin/tclsh

set EXEC_PATH @CMAKE_RUNTIME_OUTPUT_DIRECTORY@
puts "@CMAKE_LIBRARY_OUTPUT_DIRECTORY@"
puts "@CMAKE_LIBRARY_OUTPUT_DIRECTORY@"
if { $argc != 3 && $argc != 4 } {
  puts "ERROR: Incorect number of arguments";
  exit -1 ;
}

source ${EXEC_PATH}/CheckOutputsNewer.tcl

set csfClipped_Moving [lindex $argv 0];
set csfClipped_Fixed [lindex $argv 1];
set DeformationOutput [lindex $argv 2];



####################################################################################
#set SumGradfileName [ regsub "_class_csf_clipped.nii.gz" $csfClipped_Moving "_SumGrad.nii.gz" ]
#set t1fileName      [ regsub "_class_csf_clipped.nii.gz" $csfClipped_Moving  "_T1.nii.gz" ]
#set unclippedMoving [ regsub "_class_csf_clipped.nii.gz" $csfClipped_Moving "_class_clipped.nii.gz" ]
#set unclippedFixed [ regsub "_class_csf_clipped.nii.gz" $csfClipped_Fixed "_class_clipped.nii.gz" ]
####################################################################################
#if { [ file exists $t1fileName ] == 0 } {
#  set t1fileName      [ regsub "_class_clipped.nii.gz" $unclippedMoving "_t1.nii.gz" ]
#}
#set t2fileName      [ regsub "_class_clipped.nii.gz" $unclippedMoving "_T2.nii.gz" ]
#if { [ file exists $t2fileName ] == 0 } {
#        set t2fileName      [ regsub "_class_clipped.nii.gz" $unclippedMoving "_t2.nii.gz" ]
#}
####################################################################################
#puts $SumGradfileName
#if  {  [ CheckOutputsNewer [list $SumGradfileName ] [list ${t1fileName} ${t2fileName} ]  ] == false } {
#  puts "Create New Sum Grad Image... ---------------------------------------------------------"
# puts "${EXEC_PATH}/GenerateSummedGradientImage ${t1fileName} ${t2fileName} ${SumGradfileName}"
# puts "--------------------------------------------------------------------------------------"
# set SumbradStatus [catch { exec ${EXEC_PATH}/GenerateSummedGradientImage ${t1fileName} ${t2fileName} ${SumGradfileName} } RETURN_VALUE ];
#}
####################################################################################
#puts ${unclippedMoving}
####################################################################################
set basepath [file dirname ${DeformationOutput}]

file mkdir ${basepath}

set MovingImage ${csfClipped_Moving}
set FixedImage ${csfClipped_Fixed}
####################################################################################
#if { [ CheckOutputsNewer  [list ${csfClipped_Moving}] [list $unclippedMoving ] ]== false } {
# puts "====================================================================================="
# puts "Run clipping csf commends: "
# puts "${EXEC_PATH}/GenerateCsfClippedFromClassifiedImage $unclippedMoving ${csfClipped_Moving}"
# puts "====================================================================================="
# set Moving_csf_Status [catch { exec ${EXEC_PATH}/GenerateCsfClippedFromClassifiedImage $unclippedMoving ${csfClipped_Moving} } RETURN_VALUE ];
#}
#if { [CheckOutputsNewer   [list  ${csfClipped_Fixed}] [list $unclippedFixed] ] == false } {
#  puts "Run clipping csf commends: "
#  puts "${EXEC_PATH}/GenerateCsfClippedFromClassifiedImage $unclippedFixed ${csfClipped_Fixed} "
#  set Fixed_csf_Status [catch { exec ${EXEC_PATH}/GenerateCsfClippedFromClassifiedImage $unclippedFixed ${csfClipped_Fixed} } RETURN_VALUE ];
#}
####################################################################################
puts " About to call DemonsWarp tcl script..."
puts "--------------------------------------------------------------------------------------"
puts "${EXEC_PATH}/GenerateDemonWarpTransform.tcl ${MovingImage} ${FixedImage} ${DeformationOutput} "
set DemonsStatus [catch { exec ${EXEC_PATH}/GenerateDemonWarpTransform.tcl ${MovingImage} ${FixedImage} ${DeformationOutput} } RETURN_VALUE ];

puts "Status from root file about Demon::::: ${DemonsStatus}"

